{"version":3,"sources":["redux/phonebook/phonebook-types.js","components/AddContactForm/AddContactForm.styled.jsx","components/AddContactForm/AddContactForm.jsx","redux/phonebook/phonebook-actions.js","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactList/ContactList.jsx","components/PageWrapper/PageWrapper.styled.jsx","components/ContactFilter/ContactFilter.styled.jsx","components/ContactFilter/ContactFilter.jsx","App.js","redux/phonebook/phonebook-reducer.js","store.js","index.js"],"names":["AddContactContainer","FormContainer","ItemFormLabel","ContactBtn","AddContactBtn","text","connect","dispatch","onSubmit","name","number","type","actionTypes","payload","id","nanoid","actions","useState","setName","setNumber","handlechange","e","target","value","preventDefault","pattern","title","placeholder","autoComplete","onChange","required","propTypes","PropTypes","func","isRequired","ContactListContainer","Headline","ContactItemContainer","ContactItem","DeleteBtn","ItemName","state","contacts","items","normalizedFilter","filter","toLowerCase","contact","includes","onDeleteContact","length","map","onClick","PageWrapper","ContactFilterContainer","ContactFilterName","ContactFilterInput","filterContact","useEffect","window","localStorage","setItem","JSON","stringify","itemsInitialState","parse","getItem","contactsReducer","combineReducers","find","alert","rootReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSACe,EACA,uBADA,EAEG,0BAFH,EAGG,0B,cCDX,IAAMA,EAAmB,iMASnBC,EAAa,uGAKbC,EAAa,wGAKpBC,EAAU,mKAST,SAASC,EAAT,GAAkC,IAATC,EAAQ,EAARA,KAC9B,OAAO,cAACF,EAAD,UAAaE,IC8CtB,IAIeC,cAAQ,MAJC,SAACC,GAAD,MAAe,CACrCC,SAAU,SAACC,EAAMC,GAAP,OAAkBH,EC3EJ,SAACE,EAAMC,GAAP,MAAmB,CAC3CC,KAAMC,EACNC,QAAS,CACPC,GAAIC,cACJN,KAAMA,EACNC,OAAQA,IDsE2BM,CAAmBP,EAAMC,QAGjDJ,EArEf,YAAuC,IAAbE,EAAY,EAAZA,SACxB,EAAwBS,mBAAS,IAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOP,EAAP,KAAeS,EAAf,KASA,SAASC,EAAaC,GACpB,MAAwBA,EAAEC,OAAlBb,EAAR,EAAQA,KAAMc,EAAd,EAAcA,MACd,OAAQd,GACN,IAAK,OACHS,EAAQK,GACR,MACF,IAAK,SACHJ,EAAUI,IAOhB,OACE,mCACE,eAACvB,EAAD,WACE,2CACA,eAACC,EAAD,CAAeO,SAzBrB,SAAwBa,GACtBA,EAAEG,iBACFhB,EAASC,EAAMC,GACfQ,EAAQ,IACRC,EAAU,KAqBN,UACE,eAACjB,EAAD,kBAEE,uBACES,KAAK,OACLF,KAAK,OACLgB,QAAQ,yHACRC,MAAM,kcACNC,YAAY,oBACZC,aAAa,MACbL,MAAOd,EACPoB,SAAUT,EACVU,UAAQ,OAGZ,eAAC5B,EAAD,oBAEE,uBACES,KAAK,MACLF,KAAK,SACLgB,QAAQ,yFACRC,MAAM,giBACNC,YAAY,sBACZC,aAAa,MACbL,MAAOb,EACPmB,SAAUT,EACVU,UAAQ,OAGZ,cAAC1B,EAAD,CAAeO,KAAK,SAASN,KAAM,2BAa7CJ,EAAc8B,UAAY,CACxBvB,SAAUwB,IAAUC,KAAKC,YEnFpB,IAAMC,EAAoB,oFAIpBC,EAAQ,kFCJd,IAAMC,EAAoB,8EAGpBC,EAAW,2CAEXC,EAAS,wGAITC,EAAQ,oGCmCrB,IAiBelC,eAjBS,SAACmC,GACvB,MAA0BA,EAAMC,SAAxBC,EAAR,EAAQA,MACFC,EADN,EAAeC,OACiBC,cAKhC,MAAO,CACLJ,SALsBC,EAAME,QAAO,SAACE,GAAD,OACnCA,EAAQtC,KAAKqC,cAAcE,SAASJ,MAKpCC,OAAQJ,EAAMC,SAASG,WAIH,SAACtC,GAAD,MAAe,CACrC0C,gBAAiB,SAACnC,GAAD,OAAQP,EH/CE,SAACO,GAAD,MAAS,CACpCH,KAAMC,EACNC,QAASC,GG6CyBE,CAAsBF,QAG3CR,EAnDf,YAA6D,IAAtCoC,EAAqC,EAArCA,SAAUG,EAA2B,EAA3BA,OAAQI,EAAmB,EAAnBA,gBACvC,OACE,mCACE,eAACd,EAAD,WACsB,KAAb,OAANU,QAAM,IAANA,OAAA,EAAAA,EAAQK,SAAoC,IAApBR,EAASQ,OAChC,cAACd,EAAD,0CACqB,KAAb,OAANS,QAAM,IAANA,OAAA,EAAAA,EAAQK,SAAoC,IAApBR,EAASQ,OACnC,2DAEA,cAACd,EAAD,uBAGDM,EAASS,KAAI,SAACJ,GAAD,OACZ,cAACT,EAAD,UACE,eAACD,EAAD,WACE,eAACG,EAAD,WACGO,EAAQtC,KACR,KACAsC,EAAQrC,UAEX,cAAC6B,EAAD,CACEa,QAAS,kBAAMH,EAAgBF,EAAQjC,KACvCH,KAAK,SAFP,wBAPcoC,EAAQjC,eCvB7B,IAAMuC,EAAW,qICAjB,IAAMC,EAAsB,6CAEtBC,EAAiB,iGAKjBC,EAAkB,6CCgB/B,IAQelD,eARS,SAACmC,GAAD,MAAY,CAClCI,OAAQJ,EAAMI,WAGQ,SAACtC,GAAD,MAAe,CACrCkD,cAAe,SAACpC,GAAD,OAAOd,GNZMgB,EMYyBF,EAAEC,OAAOC,MNZvB,CACvCZ,KAAMC,EACNC,QAASU,KAFkB,IAACA,MMefjB,EAvBf,YAAmD,IAA1BuC,EAAyB,EAAzBA,OAAQY,EAAiB,EAAjBA,cAC/B,OACE,eAACH,EAAD,WACE,cAACC,EAAD,mCACA,cAACC,EAAD,CACE7C,KAAK,OACLF,KAAK,SACLmB,aAAa,MACbL,MAAOsB,EACPhB,SAAU4B,UCMlB,I,EAKenD,eALS,SAACmC,GAAD,MAAY,CAClCC,SAAUD,EAAMC,SAASC,MACzBE,OAAQJ,EAAMC,SAASG,UAGe,KAAzBvC,EAnBf,YAA4B,IAAboC,EAAY,EAAZA,SAKb,OAJAgB,qBAAU,WACRC,OAAOC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUrB,MACtD,CAACA,IAGF,eAACW,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,U,uBChBAW,EAAiB,UAAGF,KAAKG,MAC7BN,OAAOC,aAAaM,QAAQ,oBADP,QAElB,CACH,CAAEpD,GAAI,OAAQL,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEI,GAAI,OAAQL,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEI,GAAI,OAAQL,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEI,GAAI,OAAQL,KAAM,iBAAkBC,OAAQ,cAmCjCyD,EALSC,0BAAgB,CACtCzB,MA5BmB,WAAmD,IAAlDF,EAAiD,uDAAzCuB,EAAyC,yCAApBrD,EAAoB,EAApBA,KAAME,EAAc,EAAdA,QACvD,OAAQF,GACN,KAAKC,EACH,OAAI6B,EAAM4B,MAAK,SAACtB,GAAD,OAAaA,EAAQtC,OAASI,EAAQJ,SACnD6D,MAAM,GAAD,OAAIzD,EAAQJ,KAAZ,6BACE,GAEH,CAAEI,GAAR,mBAAoB4B,IAEtB,KAAK7B,EACH,OAAO,YAAI6B,EAAMI,QAAO,SAACE,GAAD,OAAaA,EAAQjC,KAAOD,MAEtD,QACE,OAAO4B,IAgBXI,OAZoB,WAAoC,IAAnCJ,EAAkC,uDAA1B,GAA0B,yCAApB9B,EAAoB,EAApBA,KAAME,EAAc,EAAdA,QACzC,OAAQF,GACN,KAAKC,EACH,OAAOC,EAET,QACE,OAAO4B,MC/BP8B,EAAcH,0BAAgB,CAClC1B,SAAUyB,IAKGK,EAFDC,sBAAYF,EAAaG,iCCDvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.91eed013.chunk.js","sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  ADD_CONTACT: 'phonebook/AddContact',\r\n  DELETE_CONTACT: 'phonebook/DeleteContact',\r\n  FILTER_CONTACT: 'phonebook/FilterContact',\r\n}\r\n","import styled from '@emotion/styled/macro'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddContactContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  width: max-content;\r\n  align-items: center;\r\n`\r\nexport const FormContainer = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nexport const ItemFormLabel = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst ContactBtn = styled.button`\r\n  display: block;\r\n  padding: 5px;\r\n  margin: 10px 0px;\r\n  width: max-content;\r\n  coursor: pointer;\r\n  margin: 20px auto;\r\n`\r\n\r\nexport function AddContactBtn({ text }) {\r\n  return <ContactBtn>{text}</ContactBtn>\r\n}\r\n\r\nAddContactBtn.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as actions from '../../redux/phonebook/phonebook-actions'\r\n\r\nimport {\r\n  AddContactContainer,\r\n  AddContactBtn,\r\n  FormContainer,\r\n  ItemFormLabel,\r\n} from './AddContactForm.styled'\r\n\r\nfunction AddContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  function submitContacts(e) {\r\n    e.preventDefault()\r\n    onSubmit(name, number)\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  function handlechange(e) {\r\n    const { name, value } = e.target\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value)\r\n        break\r\n      case 'number':\r\n        setNumber(value)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AddContactContainer>\r\n        <h1>Phonebook</h1>\r\n        <FormContainer onSubmit={submitContacts}>\r\n          <ItemFormLabel>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              placeholder=\"Put the name here\"\r\n              autoComplete=\"off\"\r\n              value={name}\r\n              onChange={handlechange}\r\n              required\r\n            />\r\n          </ItemFormLabel>\r\n          <ItemFormLabel>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              placeholder=\"Put the number here\"\r\n              autoComplete=\"off\"\r\n              value={number}\r\n              onChange={handlechange}\r\n              required\r\n            />\r\n          </ItemFormLabel>\r\n          <AddContactBtn type=\"submit\" text={'Add contact'} />\r\n        </FormContainer>\r\n      </AddContactContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nconst dispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(actions.addContact(name, number)),\r\n})\r\n\r\nexport default connect(null, dispatchToProps)(AddContactForm)\r\n\r\nFormContainer.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n}\r\n","import { nanoid } from 'nanoid'\r\n\r\nimport actionTypes from './phonebook-types'\r\n\r\nexport const addContact = (name, number) => ({\r\n  type: actionTypes.ADD_CONTACT,\r\n  payload: {\r\n    id: nanoid(),\r\n    name: name,\r\n    number: number,\r\n  },\r\n})\r\n\r\nexport const deleteContact = (id) => ({\r\n  type: actionTypes.DELETE_CONTACT,\r\n  payload: id,\r\n})\r\n\r\nexport const filterContact = (value) => ({\r\n  type: actionTypes.FILTER_CONTACT,\r\n  payload: value,\r\n})\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const ContactListContainer = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n`\r\nexport const Headline = styled.h2`\r\n  text-align: center;\r\n`\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const ContactItemContainer = styled.div`\r\n  display: flex;\r\n`\r\nexport const ContactItem = styled.li``\r\n\r\nexport const DeleteBtn = styled.button`\r\n  width: max-content;\r\n  padding: 3px 5px;\r\n`\r\nexport const ItemName = styled.p`\r\n  display: block;\r\n  width: 250px;\r\n  margin: 0;\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as actions from '../../redux/phonebook/phonebook-actions'\r\nimport { ContactListContainer, Headline } from './ContactList.styled'\r\nimport {\r\n  ContactItemContainer,\r\n  ContactItem,\r\n  ItemName,\r\n  DeleteBtn,\r\n} from '../ContactItem/ContactItem.styled'\r\n\r\nfunction ContactList({ contacts, filter, onDeleteContact }) {\r\n  return (\r\n    <>\r\n      <ContactListContainer>\r\n        {filter?.length === 0 && contacts.length === 0 ? (\r\n          <Headline>You have not contacts saved</Headline>\r\n        ) : filter?.length !== 0 && contacts.length === 0 ? (\r\n          <h1> Can not find the Contact</h1>\r\n        ) : (\r\n          <Headline>Contacts</Headline>\r\n        )}\r\n\r\n        {contacts.map((contact) => (\r\n          <ContactItem key={contact.id}>\r\n            <ContactItemContainer>\r\n              <ItemName>\r\n                {contact.name}\r\n                {': '}\r\n                {contact.number}\r\n              </ItemName>\r\n              <DeleteBtn\r\n                onClick={() => onDeleteContact(contact.id)}\r\n                type=\"button\"\r\n              >\r\n                Delete\r\n              </DeleteBtn>\r\n            </ContactItemContainer>\r\n          </ContactItem>\r\n        ))}\r\n      </ContactListContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { items, filter } = state.contacts\r\n  const normalizedFilter = filter.toLowerCase()\r\n  const visibleContacts = items.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  )\r\n\r\n  return {\r\n    contacts: visibleContacts,\r\n    filter: state.contacts.filter,\r\n  }\r\n}\r\n\r\nconst dispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n})\r\n\r\nexport default connect(mapStateToProps, dispatchToProps)(ContactList)\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  filter: PropTypes.string,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n}\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const PageWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n`\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const ContactFilterContainer = styled.label``\r\n\r\nexport const ContactFilterName = styled.p`\r\n  font-weight: 500;\r\n  font-style: italic;\r\n`\r\n\r\nexport const ContactFilterInput = styled.input``\r\n","import PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as actions from '../../redux/phonebook/phonebook-actions'\r\nimport {\r\n  ContactFilterContainer,\r\n  ContactFilterInput,\r\n  ContactFilterName,\r\n} from './ContactFilter.styled'\r\n\r\nfunction ContactFilter({ filter, filterContact }) {\r\n  return (\r\n    <ContactFilterContainer>\r\n      <ContactFilterName>Find contact by name</ContactFilterName>\r\n      <ContactFilterInput\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        value={filter}\r\n        onChange={filterContact}\r\n      />\r\n    </ContactFilterContainer>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.filter,\r\n})\r\n\r\nconst dispatchToProps = (dispatch) => ({\r\n  filterContact: (e) => dispatch(actions.filterContact(e.target.value)),\r\n})\r\n\r\nexport default connect(mapStateToProps, dispatchToProps)(ContactFilter)\r\n\r\nContactFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  filterContact: PropTypes.func.isRequired,\r\n}\r\n","import './App.css'\n\nimport React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport AddContactForm from './components/AddContactForm/AddContactForm.jsx'\nimport ContactList from './components/ContactList/ContactList.jsx'\nimport { PageWrapper } from './components/PageWrapper/PageWrapper.styled.jsx'\nimport ContactFilter from './components/ContactFilter/ContactFilter.jsx'\n\nfunction App({ contacts }) {\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts))\n  }, [contacts])\n\n  return (\n    <PageWrapper>\n      <AddContactForm />\n      <ContactFilter />\n      <ContactList />\n    </PageWrapper>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n})\n\nexport default connect(mapStateToProps, null)(App)\n\nApp.propTypes = {\n  contacts: PropTypes.array.isRequired,\n}\n","import { combineReducers } from 'redux'\r\n\r\nimport actionTypes from './phonebook-types'\r\n\r\nconst itemsInitialState = JSON.parse(\r\n  window.localStorage.getItem('contacts'),\r\n) ?? [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n]\r\n\r\nconst itemsReducer = (state = itemsInitialState, { type, payload }) => {\r\n  switch (type) {\r\n    case actionTypes.ADD_CONTACT:\r\n      if (state.find((contact) => contact.name === payload.name)) {\r\n        alert(`${payload.name} is already in contacts`)\r\n        return false\r\n      }\r\n      return [payload, ...state]\r\n\r\n    case actionTypes.DELETE_CONTACT:\r\n      return [...state.filter((contact) => contact.id !== payload)]\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst filterReducer = (state = '', { type, payload }) => {\r\n  switch (type) {\r\n    case actionTypes.FILTER_CONTACT:\r\n      return payload\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n})\r\n\r\nexport default contactsReducer\r\n","import { createStore, combineReducers } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport contactsReducer from './redux/phonebook/phonebook-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools())\r\n\r\nexport default store\r\n\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: JSON.parse(window.localStorage.getItem('contacts')) ?? [\r\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//     ],\r\n//     filter: '',\r\n//   },\r\n// }\r\n\r\n// const reducer = (state = initialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'addContactForm/AddContact':\r\n//       if (\r\n//         state.contacts.items.find((contact) => contact.name === payload.name)\r\n//       ) {\r\n//         alert(`${payload.name} is already in contacts`)\r\n//         return false\r\n//       }\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           items: [payload, ...state.contacts.items],\r\n//         },\r\n//       }\r\n//     case 'contactList/DeleteContact':\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           items: [\r\n//             ...state.contacts.items.filter((contact) => contact.id !== payload),\r\n//           ],\r\n//         },\r\n//       }\r\n//     case 'contactFilter/FilterContact':\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           filter: payload,\r\n//         },\r\n//       }\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport './index.css'\nimport App from './App'\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}